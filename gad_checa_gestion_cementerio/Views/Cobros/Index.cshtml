@model gad_checa_gestion_cementerio.Models.Listas.ContratoPaginadaViewModel
@{
    ViewData["Title"] = "Cobros";
}
<div class="my-4">
    <div class="card border-0 shadow-sm">
        <div class="card-header bg-light border-0 d-flex flex-wrap justify-content-between align-items-center py-3">
            <div class="d-flex align-items-center">
                <span class="me-3"><i class="ti ti-coin text-primary fs-3"></i></span>
                <div>
                    <h4 class="mb-1 text-dark">Lista de Cobros</h4>
                    <p class="mb-0 text-muted small">Gestione los registros: puede listar, modificar, buscar y eliminar.
                    </p>
                </div>
            </div>
            <div class="d-flex gap-2 align-items-center mt-3 mt-md-0 flex-wrap-nowrap">
                <div class="position-relative">
                    <div class="input-group input-group-sm">
                        <input type="text" name="Filtro" id="hs-table-with-pagination-search" class="form-control"
                            placeholder="Buscar por contrato, nombre, identificación..." aria-label="Search"
                            value="@ViewBag.Filtro" />
                        <span class="input-group-text bg-white" id="search-icon">
                            <i class="ti ti-search"></i>
                        </span>
                    </div>
                    <small class="text-muted position-absolute" id="search-hint"
                        style="font-size: 0.75rem; top: 100%; left: 0; display: none;">
                        <i class="ti ti-clock me-1"></i>Buscando en 2s...
                    </small>
                    <small class="text-primary position-absolute" id="search-tip"
                        style="font-size: 0.75rem; top: 100%; left: 0; white-space: nowrap;">
                        💡 Presiona Enter para buscar inmediatamente
                    </small>
                </div>
                <a class="btn btn-outline-secondary btn-sm" asp-action="Index">
                    <i class="ti ti-list-search me-1"></i>Ver todos
                </a>
            </div>
        </div>
        @await Html.PartialAsync("_ListaCobros", Model.Contratos)
        @await Html.PartialAsync("_Paginacion", Model)
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Configurar búsqueda con debounce optimizado
            let searchTimeout;
            let countdownInterval;
            const searchInput = $('#hs-table-with-pagination-search');
            const searchHint = $('#search-hint');
            const searchTip = $('#search-tip');
            const searchIcon = $('#search-icon i');
            let lastSearchTerm = '';
            let remainingTime = 0;
            let isTyping = false;

            // Función para actualizar el contador visual
            function updateCountdown() {
                if (remainingTime > 0) {
                    searchHint.html(`<i class="ti ti-clock me-1"></i>Buscando en ${(remainingTime / 100).toFixed(1)}s...`);
                    remainingTime -= 10;
                } else {
                    clearInterval(countdownInterval);
                    searchHint.hide();
                    performSearch();
                }
            }

            // Función para mostrar indicador de búsqueda
            function showSearchIndicator() {
                remainingTime = 200; // 2 segundos en centésimas
                searchHint.show();
                searchTip.hide();
                clearInterval(countdownInterval);
                countdownInterval = setInterval(updateCountdown, 100);
            }

            // Función para ocultar indicador de búsqueda
            function hideSearchIndicator() {
                clearInterval(countdownInterval);
                searchHint.hide();
                if (!isTyping) {
                    searchTip.show();
                }
                remainingTime = 0;
            }

            // Función para realizar la búsqueda
            function performSearch() {
                const filtro = searchInput.val().trim();

                // Solo buscar si el término ha cambiado
                if (filtro === lastSearchTerm) {
                    hideSearchIndicator();
                    return;
                }

                lastSearchTerm = filtro;
                console.log('Realizando búsqueda con filtro:', filtro);

                // Mostrar icono de carga
                searchIcon.removeClass('ti-search').addClass('ti-loader-2');
                hideSearchIndicator();

                // Redirigir con el filtro como parámetro
                const currentUrl = new URL(window.location);
                if (filtro) {
                    currentUrl.searchParams.set('filtro', filtro);
                } else {
                    currentUrl.searchParams.delete('filtro');
                }
                currentUrl.searchParams.set('pagina', '1'); // Resetear a la primera página

                window.location.href = currentUrl.toString();
            }

            // Evento de tecla presionada con debounce más largo y mejor UX
            searchInput.on('input', function () {
                clearTimeout(searchTimeout);
                clearInterval(countdownInterval);
                isTyping = true;

                const currentValue = $(this).val().trim();

                // Ocultar el tip mientras escribe
                searchTip.hide();
                searchHint.hide();

                if (currentValue !== lastSearchTerm) {
                    // Esperar 2 segundos de inactividad antes de buscar
                    searchTimeout = setTimeout(function () {
                        isTyping = false;
                        showSearchIndicator();
                    }, 2000);
                } else {
                    isTyping = false;
                    searchTip.show();
                }
            });

            // Evento de Enter para búsqueda inmediata
            searchInput.on('keypress', function (e) {
                if (e.which === 13) { // Enter key
                    e.preventDefault();
                    clearTimeout(searchTimeout);
                    hideSearchIndicator();
                    isTyping = false;
                    performSearch();
                }
            });

            // Evento cuando el campo pierde el foco (blur) para búsqueda
            searchInput.on('blur', function () {
                clearTimeout(searchTimeout);
                hideSearchIndicator();
                isTyping = false;
                // Pequeño delay para permitir clicks en otros elementos
                setTimeout(function () {
                    if (!$(':focus').is(searchInput)) {
                        const currentValue = searchInput.val().trim();
                        if (currentValue !== lastSearchTerm) {
                            performSearch();
                        }
                    }
                }, 150);
            });

            // Evento al enfocar el campo
            searchInput.on('focus', function () {
                if (searchTimeout) {
                    hideSearchIndicator();
                }
                searchTip.hide();
                isTyping = false;
            });

            // Limpiar búsqueda al hacer clic en "Ver todos"
            $('a[asp-action="Index"]').on('click', function (e) {
                e.preventDefault();
                clearTimeout(searchTimeout);
                hideSearchIndicator();
                isTyping = false;
                window.location.href = '@Url.Action("Index", "Cobros")';
            });

            // Inicializar el estado
            lastSearchTerm = searchInput.val().trim();

            // Mostrar tip inicial solo si no hay valor en el campo
            if (lastSearchTerm === '') {
                searchTip.show();
            } else {
                searchTip.hide();
            }

            // Opcional: enfocar el campo de búsqueda al cargar la página si está vacío
            if (lastSearchTerm === '' && !window.location.search.includes('filtro=')) {
                setTimeout(function () {
                    searchInput.focus();
                }, 500);
            }
        });
    </script>
}
 