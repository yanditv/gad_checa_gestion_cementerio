@model gad_checa_gestion_cementerio.Models.ContratoModel
@{
    ViewData["Title"] = "Crear Contrato";
}

@if (Model.EsRenovacion && Model.ContratoOrigenId.HasValue)
{
    <div class="alert alert-info mb-4">
        <div class="d-flex align-items-center">
            <i class="bi bi-info-circle-fill me-3 fs-5"></i>
            <div>
                <h5 class="mb-1">Este es un contrato de renovación</h5>
                <p class="mb-0">Este contrato renueva el contrato original con ID: @Model.ContratoOrigenId</p>
                @if (ViewBag.ContratoOriginalNumero != null)
                {
                    <p class="mb-0">Número de contrato original: <strong>@ViewBag.ContratoOriginalNumero</strong></p>
                }
            </div>
        </div>
    </div>
}

<div class="container mt-5">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h2 class="h4 mb-0 text-white">Datos del Contrato</h2>
        </div>
        <div class="card-body">
            <p class="text-muted mb-4">Asegúrate de completar los campos necesarios</p>
            <form asp-action="CreateContrato" method="post">
                <div class="row">
                    <!-- Campo Número Secuencial -->
                    <div class="col-md-6 mb-3">
                        <label asp-for="NumeroSecuencial" class="form-label">Nro. Secuencial</label>
                        <input asp-for="NumeroSecuencial" readonly class="form-control" />
                        <span asp-validation-for="NumeroSecuencial" class="text-danger small"></span>
                    </div>

                    <!-- Campo Bóveda con botón de búsqueda -->
                    <div class="col-md-6 mb-3">
                        <label asp-for="BovedaId" class="form-label">Bóveda</label>
                        <input asp-for="BovedaId" hidden readonly class="form-control" />
                        <input asp-for="Boveda.NumeroSecuencial" hidden readonly class="form-control" />

                        <!-- Campos ocultos para renovación -->
                        <input asp-for="EsRenovacion" type="hidden" />
                        <input asp-for="ContratoOrigenId" type="hidden" />

                        <div class="input-group">

                            <input id="boveda_seleccionada"
                                value="Bóveda #@(Model.Boveda?.NumeroSecuencial ?? Model.BovedaId.ToString())" readonly
                                class="form-control" />
                            <button type="button" class="btn btn-outline-secondary" onclick="abrirModalBovedas('')"
                                @(Model.NumeroSecuencial != null && Model.NumeroSecuencial.StartsWith("RNV-") ?
                                                                "disabled" : "")>
                                <i class="bi bi-search"></i> Buscar
                            </button>
                        </div>
                        <span asp-validation-for="BovedaId" class="text-danger small"></span>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="FechaInicio" class="form-label">Fecha de Inicio</label>
                        <input asp-for="FechaInicio" type="date" class="form-control" />
                        <span asp-validation-for="FechaInicio" class="text-danger"></span>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label asp-for="FechaFin" class="form-label">Fecha de Fin</label>
                        <input asp-for="FechaFin" type="date" class="form-control" />
                        <span asp-validation-for="FechaFin" class="text-danger"></span>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="NumeroDeMeses" class="form-label">Número de años</label>
                        <input asp-for="NumeroDeMeses" type="number" class="form-control" />
                        <span asp-validation-for="NumeroDeMeses" class="text-danger"></span>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label asp-for="MontoTotal" class="form-label">Monto Total</label>
                        <input asp-for="MontoTotal" type="number" step="0.01" class="form-control" />
                        <span asp-validation-for="MontoTotal" class="text-danger"></span>
                    </div>
                </div>

                <div class="mb-3">
                    <label asp-for="Observaciones" class="form-label">Observaciones</label>
                    <textarea asp-for="Observaciones" rows="3" class="form-control"></textarea>
                    <span asp-validation-for="Observaciones" class="text-danger"></span>
                </div>

                @if (Model.EsRenovacion && Model.ContratoOrigenId.HasValue)
                {
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle-fill me-2"></i>
                        <strong>Este contrato es una renovación</strong>
                        <p class="mb-0">La renovación está vinculada al contrato original ID: @Model.ContratoOrigenId</p>
                    </div>
                }
            </form>
        </div>
    </div>
</div>
<div id="contenedorModalBovedas"></div>
@* @await Html.PartialAsync("_SelectBoveda", new List<gad_checa_gestion_cementerio.Models.BovedaModel>()) *@

<script>




    document.getElementById('FechaInicio').addEventListener('change', calcularCuotas);
    document.getElementById('FechaFin').addEventListener('change', calcularCuotas);
    document.getElementById('MontoTotal').addEventListener('input', calcularCuotas);

    function calcularCuotas() {
        var fechaInicio = new Date(document.getElementById('FechaInicio').value);
        var fechaFin = new Date(document.getElementById('FechaFin').value);
        var montoTotal = parseFloat(document.getElementById('MontoTotal').value);
        var cuotasContainer = document.getElementById('cuotasContainer');
        cuotasContainer.innerHTML = '';

        if (isNaN(fechaInicio) || isNaN(fechaFin) || isNaN(montoTotal)) {
            return;
        }

        var numeroDeMeses = (fechaFin.getFullYear() - fechaInicio.getFullYear()) * 12 + (fechaFin.getMonth() - fechaInicio.getMonth());
        document.getElementById('NumeroDeMeses').value = numeroDeMeses;

        var montoCuota = montoTotal / numeroDeMeses;

        for (var i = 0; i < numeroDeMeses; i++) {
            var cuotaFecha = new Date(fechaInicio);
            cuotaFecha.setMonth(cuotaFecha.getMonth() + i);

            var cuotaDiv = document.createElement('div');
            cuotaDiv.className = 'form-group';

            var cuotaLabel = document.createElement('label');
            cuotaLabel.innerText = 'Cuota ' + (i + 1) + ' - Fecha: ' + cuotaFecha.toLocaleDateString() + ' - Monto: ' + montoCuota.toFixed(2);
            cuotaDiv.appendChild(cuotaLabel);

            cuotasContainer.appendChild(cuotaDiv);
        }
    }

</script>

<script>

    function renderTablaBovedas(data) {
        const tbody = document.getElementById("tablaBovedasBody");
        tbody.innerHTML = ""; // Limpiar

        data.bovedas.forEach(boveda => {
            const row = document.createElement("tr");

            row.innerHTML = `
            <td>${boveda.numeroSecuencial}</td>
            <td>${boveda.numero}</td>
            <td>${boveda.estado}</td>
            <td>
                <button type="button" class="btn btn-success btn-sm"
                    onclick="seleccionarBoveda(${boveda.id}, '${boveda.numeroSecuencial}')">
                    Seleccionar
                </button>
            </td>
        `;

            tbody.appendChild(row);
        });

        // Aquí podrías regenerar también la paginación si quieres
        //renderPaginacion(data.paginaActual, data.totalPaginas);
    }
    function abrirModalBovedas(filtro) {
        const tipoSelect = document.getElementById('tipoBoveda');
        const tipo = tipoSelect ? tipoSelect.value : '';

        fetch(`/Contratos/BuscarBovedas?filtro=${encodeURIComponent(filtro)}&tipo=${encodeURIComponent(tipo)}&pagina=1`)
            .then(response => response.text())
            .then(html => {
                document.getElementById('contenedorModalBovedas').innerHTML = html;

                // Esperar a que el HTML sea insertado antes de iniciar el modal
                requestAnimationFrame(() => {
                    const modalElement = document.getElementById('modalBovedas');
                    if (modalElement) {
                        const modal = new bootstrap.Modal(modalElement);
                        modal.show();

                        // Esperar a que el modal se muestre antes de llamar a buscarBovedasJson
                        modalElement.addEventListener('shown.bs.modal', function () {
                            buscarBovedasJson(1);
                        }, { once: true }); // Solo una vez por apertura
                    } else {
                        console.error('modalBovedas no se encontró en el DOM.');
                    }
                });
            });
    }

    function buscarBovedasJson(pagina = 1) {
        const filtroInput = document.getElementById('filtroBoveda');
        const tipoSelect = document.getElementById('tipoBoveda');
        const filtro = filtroInput ? filtroInput.value : '';
        const tipo = tipoSelect ? tipoSelect.value : '';

        fetch(`/Contratos/BuscarBovedasJson?filtro=${encodeURIComponent(filtro)}&tipo=${encodeURIComponent(tipo)}&pagina=${pagina}`)
            .then(response => {
                if (!response.ok) throw new Error('Error en la solicitud');
                return response.json();
            })
            .then(data => {
                const body = document.getElementById('tablaBovedasBody');
                body.innerHTML = '';
                console.log(data);

                data.bovedas.forEach(b => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${b.numeroSecuencial == null ? "S/N" : b.numeroSecuencial}</td>
                        
                        <td>${b.numero}</td>
                        <td>${b.tipo}</td>
                        <td>${b.estado}</td>
                        <td>
                            <button type="button" class="btn btn-success btn-sm"
                                    onclick="seleccionarBoveda(${b.id}, '${b.numeroSecuencial}')">
                                Seleccionar
                            </button>
                        </td>
                    `;
                    body.appendChild(row);
                });

                generarPaginacion(data.paginaActual, data.totalPaginas, filtro);
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }


    function generarPaginacion(paginaActual, totalPaginas, filtro) {
        const paginacion = document.getElementById('paginacionBovedas');
        paginacion.innerHTML = '';

        const tieneAnterior = paginaActual > 1;
        const tieneSiguiente = paginaActual < totalPaginas;

        const contenedor = document.createElement('div');
        contenedor.classList.add('d-flex', 'justify-content-between', 'align-items-center', 'my-3', 'small');

        const info = document.createElement('div');
        info.textContent = `Página ${paginaActual} de ${totalPaginas}`;

        const controles = document.createElement('div');
        controles.innerHTML = `
        <button class="btn btn-sm btn-light me-2" ${!tieneAnterior ? 'disabled' : ''} onclick="buscarBovedasJson(${paginaActual - 1})">
            &larr; Prev
        </button>
        <button class="btn btn-sm btn-light" ${!tieneSiguiente ? 'disabled' : ''} onclick="buscarBovedasJson(${paginaActual + 1})">
            Next &rarr;
        </button>
    `;

        contenedor.appendChild(info);
        contenedor.appendChild(controles);
        paginacion.appendChild(contenedor);
    }



    // Seleccionar una bóveda y cerrar el modal
    function seleccionarBoveda(id, numeroSecuencial) {
        const inputBovedaId = document.getElementById('BovedaId');
        const inputBovedaSeleccionada = document.getElementById('boveda_seleccionada');
        const inputNumeroSecuencial = document.querySelector('input[name="NumeroSecuencial"]')
        const numeroSecuencialSpan = document.querySelector('input[name="Boveda.NumeroSecuencial"]');
        const inputEsRenovacion = document.getElementById('EsRenovacion');
        const inputContratoOrigenId = document.getElementById('ContratoOrigenId');

        if (inputBovedaId) {
            inputBovedaId.value = id;
            numeroSecuencialSpan.value = numeroSecuencial;

            // Preservar los valores de renovación antes de la solicitud
            const esRenovacion = inputEsRenovacion.value === 'True' || inputEsRenovacion.value === 'true';
            const contratoOrigenId = inputContratoOrigenId.value;

            fetch('@Url.Action("RecargarContratoByTipo", "Contratos")?idBoveda=' + id)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Actualiza el campo del secuencial en el formulario
                        inputNumeroSecuencial.value = data.data.numeroSecuencial;

                        // Si hay un elemento para mostrar el número secuencial, actualizarlo también
                        const numeroSecuencialElement = document.getElementById("numero-secuencial-contrato");
                        if (numeroSecuencialElement) {
                            numeroSecuencialElement.textContent = data.data.numeroSecuencial;
                        }

                        // Restaurar los valores de renovación si es necesario
                        if (esRenovacion) {
                            inputEsRenovacion.value = 'true';
                        }

                        if (contratoOrigenId) {
                            inputContratoOrigenId.value = contratoOrigenId;
                        }

                        // Actualizar la información del contrato original si está disponible
                        if (data.data.contratoOriginalNumero) {
                            // Intentar actualizar la información en la UI si existe un contenedor para ello
                            const infoContratoOriginal = document.querySelector('.info-contrato-original');
                            if (infoContratoOriginal) {
                                infoContratoOriginal.textContent = data.data.contratoOriginalNumero;
                            }
                        }
                    }
                })
                .catch(error => {
                    console.error('Error al recargar el contrato:', error);
                });

            inputBovedaId.dispatchEvent(new Event('change'));
            inputNumeroSecuencial.dispatchEvent(new Event('change'));
            numeroSecuencialSpan.dispatchEvent(new Event('change'));


            inputBovedaSeleccionada.value = `Bóveda #${numeroSecuencialSpan.value == "null" ? inputBovedaId.value : numeroSecuencialSpan.value}`;

            inputBovedaSeleccionada.dispatchEvent(new Event('change'))
        }

        // Cerrar el modal
        const modalElement = document.getElementById('modalBovedas');
        if (modalElement) {
            const modal = bootstrap.Modal.getInstance(modalElement);
            modal.hide();
        }
    }
</script>

