@model IEnumerable<gad_checa_gestion_cementerio.Models.ContratoModel>

@inject gad_checa_gestion_cementerio.Data.ApplicationDbContext DbContext
@inject Microsoft.AspNetCore.Identity.UserManager<gad_checa_gestion_cementerio.Areas.Identity.Data.ApplicationUser> UserManager

@{
    // Método para contar recursivamente todas las renovaciones en la cadena
    int ContarRenovacionesEnCadena(int contratoId, gad_checa_gestion_cementerio.Data.ApplicationDbContext db)
    {
        // Obtener todos los hijos directos
        var hijos = db.Contrato
            .Where(c => c.ContratoOrigenId == contratoId && c.EsRenovacion)
            .ToList();
        
        if (hijos.Count == 0)
            return 0;
            
        int total = hijos.Count;
        
        // Contar recursivamente los hijos de cada hijo
        foreach (var hijo in hijos)
        {
            total += ContarRenovacionesEnCadena(hijo.Id, db);
        }
        
        return total;
    }
    
    // Método para determinar si un contrato es el último en una cadena
    bool EsUltimoContratoEnCadena(int contratoId, gad_checa_gestion_cementerio.Data.ApplicationDbContext db)
    {
        // Si el contrato no tiene hijos, es el último
        bool tieneHijos = db.Contrato.Any(c => c.ContratoOrigenId == contratoId);
        return !tieneHijos;
    }
    
    // Método para encontrar el contrato raíz de una cadena
    int EncontrarContratoRaiz(int contratoId, gad_checa_gestion_cementerio.Data.ApplicationDbContext db)
    {
        var contrato = db.Contrato.FirstOrDefault(c => c.Id == contratoId);
        if (contrato == null || !contrato.EsRenovacion || !contrato.ContratoOrigenId.HasValue)
            return contratoId; // Es el contrato raíz o no se encontró
            
        // Seguir la cadena hacia arriba
        return EncontrarContratoRaiz(contrato.ContratoOrigenId.Value, db);
    }
    
    // Obtener configuración del cementerio para validar renovaciones
    var cementerio = DbContext.Cementerio.FirstOrDefault();
    int maxRenovacionesNicho = cementerio?.VecesRenovacionNicho ?? 0;
    int maxRenovacionesBovedas = cementerio?.VecesRenovacionBovedas ?? 0;
}

<div class="table-responsive">
    <table class="table table-hover table-borderless mb-0">
        <thead class="bg-light">
            <tr>
                <th class="f-w-600">
                    <i class="ti ti-hash me-1"></i>
                    Nro. Contrato
                </th>
                <th class="f-w-600">
                    <i class="ti ti-tag me-1"></i>
                    Tipo
                </th>
                <th class="f-w-600">
                    <i class="ti ti-building me-1"></i>
                    Bóveda/Nicho
                </th>
                <th class="f-w-600">
                    <i class="ti ti-user me-1"></i>
                    Difunto
                </th>
                <th class="f-w-600">
                    <i class="ti ti-calendar me-1"></i>
                    Período
                </th>
                <th class="f-w-600">
                    <i class="ti ti-coin me-1"></i>
                    Monto
                </th>
                <th class="f-w-600">
                    <i class="ti ti-circle-check me-1"></i>
                    Estado
                </th>
                <th class="f-w-600 text-center">
                    <i class="ti ti-settings me-1"></i>
                    Acciones
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                // Calcular si este contrato se puede renovar
                bool esRenovable = false;
                string? tipoBoveda = item.Boveda?.Piso?.Bloque?.Tipo?.ToLower();
                int maxRenovacionesPermitidas = tipoBoveda == "nichos" ? maxRenovacionesNicho : maxRenovacionesBovedas;
                
                // Contar renovaciones directas (contratos hijos)
                int hijoDirectos = DbContext.Contrato.Count(c => c.ContratoOrigenId == item.Id);
                
                // Encontrar el contrato raíz (primer contrato en la cadena)
                int contratoRaizId;
                
                if (item.EsRenovacion && item.ContratoOrigenId.HasValue) 
                {
                    // Si es una renovación, buscar el contrato original (la raíz)
                    var contratoActual = item;
                    int idTemporal = item.Id;
                    
                    // Buscar el contrato raíz siguiendo la cadena hacia arriba
                    while (contratoActual.EsRenovacion && contratoActual.ContratoOrigenId.HasValue)
                    {
                        var contratoOrigen = DbContext.Contrato.FirstOrDefault(c => c.Id == contratoActual.ContratoOrigenId);
                        if (contratoOrigen == null) break;
                        
                        idTemporal = contratoOrigen.Id;
                        
                        // Convertir el contrato de la base de datos a modelo
                        var origenModel = new gad_checa_gestion_cementerio.Models.ContratoModel {
                            Id = contratoOrigen.Id,
                            EsRenovacion = contratoOrigen.EsRenovacion,
                            ContratoOrigenId = contratoOrigen.ContratoOrigenId
                        };
                        
                        contratoActual = origenModel;
                    }
                    
                    contratoRaizId = idTemporal; // Este es nuestro contrato original (raíz)
                }
                else 
                {
                    // Si no es una renovación, ya es un contrato raíz
                    contratoRaizId = item.Id;
                }
                
                // Contar el número total de renovaciones que ha tenido el contrato raíz
                int renovacionesTotales = ContarRenovacionesEnCadena(contratoRaizId, DbContext);
                
                // Para que un contrato sea renovable, TODAS estas condiciones deben cumplirse:
                // 1. Debe haber un límite de renovaciones positivo
                // 2. La cadena completa NO debe haber alcanzado el límite de renovaciones
                // 3. Debe ser el último contrato en la cadena (el más reciente)
                bool tieneLimitePositivo = maxRenovacionesPermitidas > 0;
                bool noAlcanzaLimite = renovacionesTotales < maxRenovacionesPermitidas;
                bool esUltimoContrato = EsUltimoContratoEnCadena(item.Id, DbContext);
                
                // Motivo por el que no es renovable (para mostrar el mensaje adecuado)
                string? motivoNoRenovable = null;
                if (!tieneLimitePositivo)
                    motivoNoRenovable = "La configuración del cementerio no permite renovar este tipo de espacio";
                else if (!noAlcanzaLimite)
                    motivoNoRenovable = $"La cadena ha alcanzado el límite de {maxRenovacionesPermitidas} renovaciones";
                else if (!esUltimoContrato)
                    motivoNoRenovable = "No es el último contrato en la cadena";
                
                // Un contrato solo es renovable si cumple TODAS las condiciones
                esRenovable = tieneLimitePositivo && noAlcanzaLimite && esUltimoContrato;
                
                // Determinar si es un contrato original o una renovación
                string tipoContrato = item.EsRenovacion ? "Renovación" : "Original";
                string claseTipoContrato = item.EsRenovacion ? "text-primary" : "text-success";
                
                <tr class="@(item.EsRenovacion ? "bg-light-primary" : "")">
                    <td>
                        <div class="d-flex align-items-center">
                            <span class="f-w-600">@item.NumeroSecuencial</span>
                            @if (item.ContratoOrigenId.HasValue)
                            {
                                <span class="badge bg-light-info text-info ms-2" title="Este es un contrato renovado">
                                    <i class="ti ti-repeat"></i>
                                </span>
                            }
                            @if (hijoDirectos > 0)
                            {
                                <span class="badge bg-light-warning text-warning ms-1" title="Este contrato tiene @hijoDirectos renovaciones">
                                    <i class="ti ti-git-branch"></i> @hijoDirectos
                                </span>
                            }
                        </div>
                    </td>
                    <td>
                        <span class="badge bg-light-@(item.EsRenovacion ? "primary" : "success") text-@(item.EsRenovacion ? "primary" : "success")">
                            <i class="ti ti-@(item.EsRenovacion ? "repeat" : "file-plus") me-1"></i>
                            @tipoContrato
                        </span>
                    </td>
                    <td>
                        <div>
                            <span class="f-w-600">@(item.Boveda?.NumeroSecuencial ?? item.BovedaId.ToString())</span>
                            <div class="text-muted small">
                                <i class="ti ti-tag me-1"></i>
                                @(item.Boveda?.Piso?.Bloque?.Tipo ?? "No especificado")
                            </div>
                        </div>
                    </td>
                    <td>
                        <div>
                            <span class="f-w-500">@(item.Difunto?.NombresCompletos ?? "No registrado")</span>
                        </div>
                    </td>
                    <td>
                        <div class="text-nowrap">
                            <div class="d-flex align-items-center mb-1">
                                <i class="ti ti-calendar-event text-success me-1"></i>
                                <span class="small">@item.FechaInicio.ToString("dd/MM/yyyy")</span>
                            </div>
                            <div class="d-flex align-items-center">
                                <i class="ti ti-calendar-x text-danger me-1"></i>
                                <span class="small">@(item.FechaFin?.ToString("dd/MM/yyyy") ?? "No definida")</span>
                            </div>
                        </div>
                    </td>
                    <td class="text-end">
                        <span class="f-w-600 text-success">$@item.MontoTotal.ToString("N2")</span>
                    </td>
                    <td>
                        @if (item.Estado)
                        {
                            <span class="badge bg-light-success text-success">
                                <i class="ti ti-check-circle me-1"></i>
                                Activo
                            </span>
                        }
                        else
                        {
                            <span class="badge bg-light-danger text-danger">
                                <i class="ti ti-x-circle me-1"></i>
                                Inactivo
                            </span>
                        }
                    </td>
                    <td class="text-center">
                        <div class="d-flex justify-content-center align-items-center gap-1 flex-wrap">
                            <!-- Botón de Detalles -->
                            <a asp-action="Details" asp-route-id="@item.Id" 
                               class="btn btn-sm btn-outline-info" 
                               title="Ver detalles del contrato">
                                <i class="ti ti-eye"></i>
                            </a>
                            
                            <!-- Botón de Renovar -->
                            @if (esRenovable)
                            {
                                <a asp-action="Create" asp-route-idContrato="@item.Id" 
                                   class="btn btn-sm btn-primary"
                                   title="Renovar contrato">
                                    <i class="ti ti-repeat"></i>
                                </a>
                            }
                            else
                            {
                                <button type="button" 
                                        class="btn btn-sm btn-outline-secondary" 
                                        disabled
                                        title="@(motivoNoRenovable ?? "No renovable")">
                                    <i class="ti ti-ban"></i>
                                </button>
                            }
                            
                            <!-- Botón de Documento -->
                            @if (string.IsNullOrEmpty(item.PathDocumentoFirmado))
                            {
                                <a asp-action="SubirDocumento" asp-route-idContrato="@item.Id" 
                                   class="btn btn-sm btn-outline-warning"
                                   title="Subir documento firmado">
                                    <i class="ti ti-upload"></i>
                                </a>
                            }
                            else
                            {
                                <a asp-action="SubirDocumento" asp-route-idContrato="@item.Id" 
                                   class="btn btn-sm btn-outline-success"
                                   title="Ver documento firmado">
                                    <i class="ti ti-file-text"></i>
                                </a>
                            }
                        </div>
                        
                        <!-- Información de renovaciones -->
                        @if (maxRenovacionesPermitidas > 0)
                        {
                            <div class="mt-2">
                                <small class="text-muted d-block">
                                    Renovaciones: 
                                    <span class="@(renovacionesTotales >= maxRenovacionesPermitidas ? "text-danger" : "text-info")">
                                        @renovacionesTotales de @maxRenovacionesPermitidas
                                    </span>
                                </small>
                            </div>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Mensaje si no hay contratos -->
@if (!Model.Any())
{
    <div class="text-center py-5">
        <div class="empty">
            <div class="empty-img">
                <i class="ti ti-file-search" style="font-size: 4rem; color: #d1d5db;"></i>
            </div>
            <p class="empty-title h3 mt-3">No se encontraron contratos</p>
            <p class="empty-subtitle text-muted">
                No hay contratos que coincidan con los criterios de búsqueda.
            </p>
            <div class="empty-action mt-4">
                <a asp-action="Create" class="btn btn-primary">
                    <i class="ti ti-plus me-2"></i>
                    Crear nuevo contrato
                </a>
            </div>
        </div>
    </div>
}