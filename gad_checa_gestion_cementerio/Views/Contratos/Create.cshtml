@model gad_checa_gestion_cementerio.Models.CreateContratoModel

@{
    ViewData["Title"] = "Crear Contrato";
}

<div class="">
    <!-- Card -->
    <div class="d-flex flex-column">
        <div class="overflow-auto">
            <div class="d-inline-block w-100 align-middle">
                <div class="bg-secondary border overflow-hidden rounded-xl shadow-sm">
                    <!-- Header -->
                    <div class="px-4 py-3 border-bottom d-flex justify-content-between align-items-center">
                        <div>
                            <h2 class="text-white h4">
                                Contrato de Servicio de Arrendamiento de Cementerio
                            </h2>
                            <p class="text-white small">
                                @Model.contrato.NumeroSecuencial
                            </p>
                        </div>
                        <div>
                            <div class="d-flex align-items-center">
                                <!-- Botón "Ver todos" -->
                                <a class="btn btn-outline-light" asp-action="Index">
                                    Ver todos
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="bg-white rounded-lg shadow-md pb-2 p-4">
        <!-- Stepper -->
        <div id="stepper">
            <!-- Stepper Nav -->
            <div class="stepper">
                <div class="step completed" data-step="1" data-url="@Url.Action("CreateContrato", "Contratos")">
                    <div class="circle">1</div>
                    <div>Datos del contrato</div>
                </div>
                <div class="step" data-step="2" data-url="@Url.Action("CreateDifunto", "Contratos")">
                    <div class="circle">2</div>
                    <div>Datos del Difunto</div>
                </div>
                <div class="step" data-step="3" data-url="@Url.Action("CreateResponsables", "Contratos")">
                    <div class="circle">3</div>
                    <div>Datos de los Responsables</div>
                </div>
                <div class="step" data-step="4" data-url="@Url.Action("CreatePago", "Contratos")">
                    <div class="circle">4</div>
                    <div>Pago</div>
                </div>
                <div class="step" data-step="5" data-url="@Url.Action("DocumentoContrato", "Contratos")">
                    <div class="circle">5</div>
                    <div>Verificación de Datos</div>
                </div>
            </div>
            <div class="bg-light" id="mensajes"></div>
            <!-- End Stepper Nav -->
            <!-- Stepper Content -->
            <div class="mt-4">
                <!-- First Content -->
                <div data-content="1">
                    @await Html.PartialAsync("_CreateContrato", Model.contrato)

                </div>
                <!-- End First Content -->
                <!-- Second Content -->
                <div data-content="2" style="display: none;">
                    @await Html.PartialAsync("_CreateDifunto", Model.difunto)
                </div>
                <!-- End Second Content -->
                <!-- Third Content -->
                <div data-content="3" style="display: none;">
                    @await Html.PartialAsync("_CreateResponsables", Model.responsables)
                </div>
                <!-- End Third Content -->
                <!-- Fourth Content -->
                <div data-content="4" style="display: none;">
                    @await Html.PartialAsync("_CreatePago", Model.pago)
                </div>
                <!-- End Fourth Content -->
                <!-- Fifth Content -->
                <div data-content="5" style="display: none;">
                    @await Html.PartialAsync("_DocumentoContrato", Model)
                </div>
                <!-- End Fifth Content -->
                <!-- Button Group -->
                <div class="mt-4 mb-4 d-flex justify-content-between">
                    <button type="button" class="btn btn-outline-secondary" id="backBtn" disabled>
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                            class="bi bi-arrow-left" viewBox="0 0 16 16">
                            <path fill-rule="evenodd"
                                d="M15 8a.5.5 0 0 1-.5.5H2.707l4.147 4.146a.5.5 0 0 1-.708.708l-5-5a.5.5 0 0 1 0-.708l5-5a.5.5 0 1 1 .708.708L2.707 7.5H14.5A.5.5 0 0 1 15 8z" />
                        </svg>
                        Atrás
                    </button>
                    <button type="button" class="btn btn-primary" id="nextBtn">
                        Siguiente
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                            class="bi bi-arrow-right" viewBox="0 0 16 16">
                            <path fill-rule="evenodd"
                                d="M1 8a.5.5 0 0 1 .5-.5h11.793l-4.147-4.146a.5.5 0 1 1 .708-.708l5 5a.5.5 0 0 1 0 .708l-5 5a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z" />
                        </svg>
                    </button>
                    <button type="button" class="btn btn-success" id="finishBtn" style="display: none;">
                        Finalizar
                    </button>
                    <button type="reset" class="btn btn-warning" id="resetBtn" style="display: none;">
                        Reiniciar
                    </button>
                </div>
                <!-- End Button Group -->
            </div>
            <!-- End Stepper Content -->
        </div>
        <!-- End Stepper -->
    </div>
</div>

<!-- Script del Stepper (dentro de la página) -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const steps = document.querySelectorAll('.step');
        const contents = document.querySelectorAll('[data-content]');
        const backBtn = document.getElementById('backBtn');
        const nextBtn = document.getElementById('nextBtn');
        const finishBtn = document.getElementById('finishBtn');
        const resetBtn = document.getElementById('resetBtn');
        const mensajesDiv = document.getElementById('mensajes');
        let currentStep = 0;

        // Pasos que no requieren validación
        const noValidationSteps = [2]; // Ejemplo: pasos 2 y 4 no requieren validación (índices 1 y 3)

        function updateStepper() {
            steps.forEach((step, index) => {
                if (index === currentStep) {
                    step.classList.add('active');
                    step.classList.remove('completed');
                } else if (index < currentStep) {
                    step.classList.add('completed');
                    step.classList.remove('active');
                } else {
                    step.classList.remove('active', 'completed');
                }
            });

            contents.forEach((content, index) => {
                if (index === currentStep) {
                    content.style.display = 'block';
                } else {
                    content.style.display = 'none';
                }
            });

            backBtn.disabled = currentStep === 0;
            nextBtn.style.display = currentStep === steps.length - 1 ? 'none' : 'inline-block';
            finishBtn.style.display = currentStep === steps.length - 1 ? 'inline-block' : 'none';
        }

        function hideAllContentsExceptFirst() {
            contents.forEach((content, index) => {
                if (index !== 0) {
                    content.style.display = 'none';
                }
            });
        }

        function initStepper() {
            hideAllContentsExceptFirst();
            updateStepper();
        }

        function validateStep(step) {
            if (noValidationSteps.includes(step)) {
                return true;
            }
            const form = contents[step].querySelector('form');
            if (form) {
                return form.checkValidity();
            }
            return true;
        }

        function postStepData(step) {
            const form = contents[step].querySelector('form');
            if (form) {
                const formData = new FormData(form);
                return fetch(form.action, {
                    method: 'POST',
                    body: formData
                }).then(response => response.json());
            }
            return Promise.resolve({ success: true });
        }

        function getStepData(step) {
            const content = contents[step];
            const url = steps[step].getAttribute('data-url');
            if (url) {
                return fetch(url).then(response => response.text()).then(html => {
                    content.innerHTML = html;
                });
            }
            return Promise.resolve();
        }

        function showErrors(errors) {
            mensajesDiv.innerHTML = '';
            errors.forEach(error => {
                const errorDiv = document.createElement('div');
                errorDiv.className = 'alert alert-danger';
                errorDiv.textContent = error;
                mensajesDiv.appendChild(errorDiv);
            });
        }

        function clearErrors() {
            mensajesDiv.innerHTML = '';
        }

        steps.forEach((step, index) => {
            step.addEventListener('click', () => {
                if (validateStep(currentStep)) {
                    postStepData(currentStep).then(data => {
                        if (data.success) {
                            currentStep = index;
                            clearErrors();
                            getStepData(currentStep).then(() => {
                                updateStepper();
                            });
                        } else {
                            showErrors(data.errors);
                        }
                    });
                } else {
                    showErrors(['Por favor, complete todos los campos requeridos antes de continuar.']);
                }
            });
        });

        backBtn.addEventListener('click', () => {
            if (currentStep > 0) {
                currentStep--;
                clearErrors();
                updateStepper();
            }
        });

        nextBtn.addEventListener('click', () => {
            if (validateStep(currentStep)) {
                postStepData(currentStep).then(data => {
                    if (data.success) {
                        if (currentStep < steps.length - 1) {
                            currentStep++;
                            clearErrors();
                            getStepData(currentStep).then(() => {
                                updateStepper();
                            });
                        }
                    } else {
                        showErrors(data.errors);
                    }
                });
            } else {
                showErrors(['Por favor, complete todos los campos requeridos antes de continuar.']);
            }
        });

        finishBtn.addEventListener('click', () => {
            if (validateStep(currentStep)) {
                postStepData(currentStep).then(data => {
                    if (data.success) {
                        // Crear un formulario en memoria
                        const form = document.createElement('form');
                        form.innerHTML = document.querySelector('form').innerHTML;

                        // Agregar los datos del modelo al FormData
                        const formData = new FormData(form);
                        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                        if (token) {
                            formData.append('__RequestVerificationToken', token);
                        }
                        // Si tienes datos adicionales en data.model, agrégalos aquí


                        fetch('@Url.Action("Save", "Contratos")', {
                            method: 'POST',
                            //body: formData
                        })
                            .then(response => response.json())
                            .then(result => {
                                if (result.success) {
                                    window.location.href = '@Url.Action("Index", "Contratos")';
                                } else {
                                    showErrors(result.errors || ['Ocurrió un error al finalizar el proceso.']);
                                }
                            })
                            .catch(() => {
                                showErrors(['Ocurrió un error al finalizar el proceso.']);
                            });
                    } else {
                        showErrors(data.errors);
                    }
                });
            } else {
                showErrors(['Por favor, complete todos los campos requeridos antes de continuar.']);
            }
        });

        resetBtn.addEventListener('click', () => {
            currentStep = 0;
            clearErrors();
            updateStepper();
        });

        initStepper();
    });
</script>

<!-- Incluir la vista parcial del modal -->
@await Html.PartialAsync("_AddResponsableModal", new gad_checa_gestion_cementerio.Models.ResponsableModel())
