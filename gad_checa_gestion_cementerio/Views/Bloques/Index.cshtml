@model gad_checa_gestion_cementerio.Models.Listas.BloquePaginadaViewModel

@{
    ViewData["Title"] = "Bloques";
}

<div class="card shadow-sm">
    <div class="card-header bg-light">
        <div class="d-flex align-items-center">
            <i class="fas fa-building me-2"></i>
            <h4 class="card-title mb-0">@ViewData["Title"]</h4>
        </div>
        <p class="mt-2 mb-0">
            Visualice y gestione los bloques del cementerio. Utilice los filtros para encontrar información específica.
        </p>
    </div>

    <div class="card-body">
        <!-- Barra de Herramientas -->
        <div class="d-flex flex-wrap gap-3 align-items-center mb-4">
            <!-- Filtros -->
            <form id="searchForm" asp-action="Index" method="get" class="d-flex gap-2 align-items-center flex-grow-1">
                <div class="input-group position-relative">
                    <span class="input-group-text bg-light">
                        <i class="fas fa-search"></i>
                    </span>
                    <input type="text" id="searchInput" name="Filtro" value="@ViewBag.Filtro"
                        placeholder="Buscar por descripción, tipo o ubicación..." class="form-control form-control-sm"
                        autocomplete="off" />
                    <div id="searchSpinner" class="position-absolute end-0 top-50 translate-middle-y me-3 d-none">
                        <div class="spinner-border spinner-border-sm text-primary" role="status">
                            <span class="visually-hidden">Buscando...</span>
                        </div>
                    </div>
                </div>
                <button type="submit" class="btn btn-primary btn-md d-flex align-items-center">
                    <i class="fas fa-filter me-2"></i>Filtrar
                </button>
            </form>

            <a asp-action="Create" class="btn btn-success btn-md d-flex align-items-center">
                <i class="fas fa-plus me-2"></i>Nuevo Bloque
            </a>
        </div>

        <!-- Lista de Bloques -->
        <div id="resultsContainer" class="table-responsive">
            <table class="table table-bordered table-hover">
                <thead class="table-light">
                    <tr>
                        <th>@Html.DisplayNameFor(model => model.Bloque.First().Descripcion)</th>
                        <th>@Html.DisplayNameFor(model => model.Bloque.First().Tipo)</th>
                        <th>Ubicación</th>
                        <th>Pisos</th>
                        <th>Bovedas/Piso</th>
                        <th>@Html.DisplayNameFor(model => model.Bloque.First().TarifaBase)</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Bloque)
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => item.Descripcion)</td>
                            <td>
                                <span class="badge bg-info">@Html.DisplayFor(modelItem => item.Tipo)</span>
                            </td>
                            <td>
                                <small class="text-muted">
                                    <i class="fas fa-map-marker-alt me-1"></i>
                                    @Html.DisplayFor(modelItem => item.CalleA) -
                                    @Html.DisplayFor(modelItem => item.CalleB)
                                </small>
                            </td>
                            <td>
                                <span class="badge bg-primary">@Html.DisplayFor(modelItem => item.NumeroDePisos)</span>
                            </td>
                            <td>
                                <span class="badge bg-success">@Html.DisplayFor(modelItem => item.BovedasPorPiso)</span>
                            </td>
                            <td class="text-success fw-bold">
                                $@Html.DisplayFor(modelItem => item.TarifaBase)
                            </td>
                            <td>
                                <div class="btn-group" role="group">
                                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info btn-sm"
                                        title="Detalles">
                                        <i class="fas fa-info-circle"></i>
                                    </a>
                                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-primary btn-sm"
                                        title="Editar">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger btn-sm"
                                        title="Eliminar">
                                        <i class="fas fa-trash"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Paginación -->
        <div id="paginationContainer" class="mt-4">
            @await Html.PartialAsync("_Paginacion", Model)
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const searchInput = document.getElementById('searchInput');
            const searchForm = document.getElementById('searchForm');
            const searchSpinner = document.getElementById('searchSpinner');
            const resultsContainer = document.getElementById('resultsContainer');
            const paginationContainer = document.getElementById('paginationContainer');

            let searchTimeout = null;
            let isSearching = false;

            // Función para realizar la búsqueda
            async function performSearch() {
                if (isSearching) return;

                isSearching = true;
                searchSpinner.classList.remove('d-none');

                try {
                    const formData = new FormData(searchForm);
                    const queryString = new URLSearchParams(formData).toString();
                    const response = await fetch(`${searchForm.action}?${queryString}`, {
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    if (!response.ok) throw new Error('Error en la búsqueda');

                    const html = await response.text();
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');

                    // Actualizar solo las partes necesarias
                    resultsContainer.innerHTML = doc.getElementById('resultsContainer').innerHTML;
                    paginationContainer.innerHTML = doc.getElementById('paginationContainer').innerHTML;

                    // Actualizar la URL sin recargar la página
                    const newUrl = new URL(window.location.href);
                    newUrl.searchParams.set('Filtro', searchInput.value);
                    window.history.pushState({}, '', newUrl);

                } catch (error) {
                    console.error('Error:', error);
                } finally {
                    isSearching = false;
                    searchSpinner.classList.add('d-none');
                }
            }

            // Evento de entrada en el campo de búsqueda
            searchInput.addEventListener('input', function () {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(performSearch, 500);
            });

            // Prevenir el envío del formulario tradicional
            searchForm.addEventListener('submit', function (e) {
                e.preventDefault();
                performSearch();
            });

            // Manejar la navegación del historial
            window.addEventListener('popstate', function () {
                const urlParams = new URLSearchParams(window.location.search);
                searchInput.value = urlParams.get('Filtro') || '';
                performSearch();
            });
        });
    </script>
}
